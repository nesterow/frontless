<todo-list>
  <section class={ classes.todoapp } if={ !state.query.identity }>
    <div class={ classes.todoname } >
      <h3>Todo App Example</h3>
      <h6>Enter any unique todo list name. The name should be hard to guess if you want to keep it private :)</h6>
      <input onkeyup={ identify } class={ classes.edit } placeholder="Todo list name..." autofocus/>
    </div>
    
  </section>
  <section class={ classes.todoapp } if={ state.query.identity }>
    <i class="icon icon-message {classes.promptIcon}"></i>
    <input onkeyup={ create } class={ classes.newTodo } placeholder="What needs to be done?" autofocus/>
    <section class="{classes.main} {state.loading && 'loading loading-lg'}">
      <div class={ classes.filters }>
        <button onclick={ () => setStatus() }
          class={jss( { filterButton: true, filterActive: !state.query.status } )}> 
            All ({ state.totals.all }) 
        </button>
        <button onclick={ () => setStatus('active')} 
          class={jss( { filterButton: true, filterActive: state.query.status === 'active' } )}> 
          Active ({ state.totals.active })
        </button>
        <button onclick={() => setStatus('done')} 
          class={jss( { filterButton: true, filterActive: state.query.status === 'done' } )}> 
          Done ({ state.totals.done }) 
        </button>
      </div>
      <ul class={ classes.todoList }>
        <li each={ item in state.items }>
          <div class="view">
            <span if={ !item.editing }>
              <input type="checkbox" class={ classes.toggle } checked={ item.status === 'done' } onchange={ (ev) => markDone(ev, item) }/>
              <label onclick={ (ev)=> edit(item) } >{ item.text }</label>
            </span>
            <span if={ item.editing } >
              <input 
                onkeyup={ (ev)=> enter(ev, item) }
                value={ item.text }
                class={ classes.edit + ' item' }
                autofocus />
            </span>
            <button class="destroy" onclick={ ()=> destroy(item) } ></button>
          </div>
        </li>
      </ul>
      <ul class={ classes.pagination } if={ state.pagination.total > state.pagination.limit }>
        <li class={ !state.pagination.page && 'disabled' } onclick={ prevPage }>
          << Prev
        </li>
        <li class={ lastPage && 'disabled' } onclick={ nextPage }>
          Next >>
        </li>
      </ul>
       <div class={ classes.pageCounter }>
          Page { state.pagination.page + 1 } of { totalPages }
       </div>
    </section>
   
  <section>

  <script>
    import withJSS from 'riot-jss'
    import styles from './todo-list.style.js'
    import {debounce} from 'lodash'
    import client from 'client'
    
    const Todos = client.service('todos')
    const TodosCount = client.service('todo/count')

    export default () =>  withJSS({
      styles,
      state: {
        items: [],
        totals: {
          all: 0,
          active: 0,
          done: 0
        },
        query: {},
        pagination: {
          limit: 5,
          skip: 0,
          total: 0,
          page: 0,
        }
      },

      async fetch(){
        
        const [id] = this.req ? this.req.params.args || [] : []
        if (id) this.state.query.identity = id;
        const {identity} = this.state.query;
        // console.log(identity)
        let query = {
          $sort: {
            time: -1
          },
          identity,
        };
        query.status = this.state.query.status;
        query.$limit = this.state.pagination.limit;
        query.$skip = this.state.pagination.skip;

        const totals = await TodosCount.find({
          query: {
            identity,
          }
        });
        const todos = await Todos.find({
          query, 
        });

        this.update({
          items: todos.data,
          totals,
          pagination: {
            limit: todos.limit,
            skip: todos.skip,
            total: todos.total,
            page: this.state.pagination.page,
          }
        })
      },

      onMounted(){
        this.save = debounce(this.save.bind(this), 100)
      },

      async create(ev){
        const {value} = ev.target
        if (ev.key !== 'Enter' || !value.trim())
          return;
        this.start();
        const {identity} = this.state.query;
        await Todos.create({
          text: value,
          status: 'active',
          time: new Date().getTime(),
          identity,
        })
        this.update({
          pagination: {
            page: 0,
            limit: 5,
            skip: 0
          }
        })
        await this.fetch()
        ev.target.value = '';
        this.end();
      },
      
      async destroy(item) {
        this.start();
        await Todos.remove(item._id)
        await this.fetch()
        this.end();
      },

      async save(item) {
        this.start()
        delete item.editing;
        this.update()
        await Todos.update(item._id, item);
        await this.fetch();
        this.end()
      },

      async markDone(ev, item){
        this.start();
        delete item.editing;
        this.update()
        item.status = ev.target.checked ? 'done' : 'active';
        await Todos.update(item._id, item);
        await this.fetch()
        this.end();
      },

      async setStatus(status) {
        this.start();
        const {identity} = this.state.query;
        this.update({
          query: {
            status,
            identity,
          }
        });
        await this.fetch()
        this.end();
      },

      async nextPage(){
        const {pagination} = this.state; 
        const page = pagination.page + 1;
        const skip = page * pagination.limit;
        pagination.skip = pagination.total > skip ? skip : pagination.skip;
        pagination.page = pagination.skip === skip ? page : pagination.page;
        this.update({ pagination, })
        this.start()
        await this.fetch()
        this.end()
      },

      async prevPage(){
        const {pagination} = this.state; 
        const page = pagination.page - 1;
        const skip = page >= 0 ? page * pagination.limit: pagination.skip;
        pagination.skip = skip;
        pagination.page = page >= 0 ? page : 0;
        this.update({ pagination, })
        this.start()
        await this.fetch()
        this.end()
      },

      get lastPage(){
        return (this.state.pagination.page + 1) === this.totalPages
      },

      get totalPages(){
        return Math.ceil(this.state.pagination.total / this.state.pagination.limit)
      },

      start(){
        this.update({loading: true})
      },

      end(){
        this.update({loading: false})
      },

      edit(item){
        this.state.items.map(e => {
          delete e.editing
        })
        item.editing = true
        this.update()
        setTimeout(()=> this.$('li input.item').focus(), 100)        
      },
      
      enter(ev, item){
        if(ev.key === 'Enter')
          return this.save(item);
        let t = ev.target;
        item.text = t.value
      },

      identify(ev){
        if (ev.key !== 'Enter') 
          return;
        this.redirect('/examples/todo', [ev.target.value])
      }
      
    }, 

    styles)
  </script>
</todo-list>