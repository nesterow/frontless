<random>
  <h4>Random Number</h4>
  <div class={ state.loading ? 'random-number loading' : 'random-number'}>
    <h2> {state.randomNumber} </h2>
    <small if={state.error} class="text-error">
      Server error.
    </small>
  </div>
  <br>
  <div class="btn-group">
    <button class="btn" onclick={ generateNumber } disabled={state.loading}>
      Generate on Client
    </button>
    <button class="btn" onclick={ generateOnServer } disabled={state.loading}>
      Generate on Server
    </button>
  </div>

  <script>
    
    import client from 'client';

    //emulate DB request
    const asyncDelay = () => new Promise((resolve) => {
      setTimeout(resolve, 500)
    })

    export default () => ({
      
      id: 'random-number-id',

      state: {
        randomNumber: 0,
      },

      async fetch() {
        // DB requests on the server
        await asyncDelay()
        this.generateNumber()
      },

      generateNumber() {
        this.update({
          randomNumber: parseInt(Math.random() * 100000)
        })
      },

      generateOnServer(){
        this.update({error: false, loading: true})
        client.service('random-number').create({})
          .then(() => {
            this.update({loading: false})
          })
          .catch((err) => {
            this.update({
              loading: false,
              error: true
            })
          })
      }

    })
  </script>
  <style>
    random {
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 52px;
    }
    random .random-number {
      padding: 16px;
      display: inline-block;
      width: 310px;
      text-align: center;
      background: #fff;
    }
    random .loading {
      color: rgba(2,2,2,.1) !important;
    }
  </style>
</random>